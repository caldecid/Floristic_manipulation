ipni_df = tidy(search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
if(dim(ipni_df)[1] == 0){
print("No Family in IPNI")
##inserting a NULL elemetn
list_fam_IPNI[[i]] = NULL
} else{
##only species with hifen
IPNI_hifen = ipni_df$name[which(str_detect(ipni_df$name,
"-"))]
##filtering
IPNI_hifen_df = ipni_df %>% filter(name %in% IPNI_hifen)
##if else statement for not saving empty dfs
if(dim(IPNI_hifen_df)[1] == 0){
print("No Species with hifen")
##inserting a NULL element
list_fam_IPNI[[i]] = NULL
} else{
##adding the modified name for further comparison with Flora
IPNI_hifen_df$compar_name = str_replace(IPNI_hifen_df$name,
"-", "")
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = IPNI_hifen_df
}
}
}
################# POWO #############################
##loop for finding the species with hifen
for(i in seq_along(fam_names)){
##calling the species within families in POWO
POWO_df = tidy(search_powo(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
if(dim(POWO_df)[1] == 0){
print("No Family in POWO")
##inserting a NULL elemetn
list_fam_POWO[[i]] = NULL
} else{
##only species with hifen
POWO_hifen = POWO_df$name[which(str_detect(POWO_df$name,
"-"))]
##filtering
POWO_hifen_df = POWO_df %>% filter(name %in% POWO_hifen)
##if else statement for not saving empty dfs
if(dim(POWO_hifen_df)[1] == 0){
print("No Species with hifen")
##inserting a NULL element
list_fam_POWO[[i]] = NULL
} else{
##adding the modified name for further comparison with Flora
POWO_hifen_df$compar_name = str_replace(POWO_hifen_df$name,
"-", "")
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_POWO[[i]] = POWO_hifen_df
}
}
}
##transforming in a dataset
POWO_hifen = do.call("rbind.fill",  list_fam_POWO)
#Source
POWO_hifen$source = "POWO"
IPNI_hifen = do.call("rbind.fill", list_fam_IPNI) %>%
select(any_of(c("family", "genus", "species",
"authors", "citationType",
"rank", "hybrid", "reference",
"publication", "publicationYear",
"referenceCollation",
"publicationId", "suppressed",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id",
"fqld", "inPowo", "wfold", "bhlLink",
"publicationYearNote", "remarks",
"referenceRemarks")))%>%
mutate(url = paste0("www.ipni.org/n/", id))
#source
IPNI_hifen$source = "IPNI"
#####matching the names with Flora de Brasil
##POWO
POWO_2nd = df$taxon_name[which(df$taxon_name %in% POWO_hifen$compar_name)]
##filtering
POWO_2nd_df = POWO_hifen %>% filter(compar_name %in% POWO_2nd)
##IPNI
IPNI_2nd = df$taxon_name[which(df$taxon_name %in% IPNI_hifen$compar_name)]
##filtering
IPNI_2nd_df = IPNI_hifen %>% filter(compar_name %in% IPNI_2nd)
##merging
sec_incon_df = rbind.fill(POWO_2nd_df, IPNI_2nd_df)
return(sec_incon_df)
}
df = complete_angio_df(angio)
View(df)
y <- second_incon_function(df = df)
df = complete_angio_df(angio[1:1000,])
y = second_incon_function(df)
second_incon_function <- function(df){
##families
fam_names <- unique(df$Família)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
######creating list for keeping the missing species within each family according to POWO
list_fam_POWO <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
names(list_fam_POWO) <- fam_names
#################IPNI########################################
##loop for finding the species with hifen
for(i in seq_along(fam_names)){
##calling the species within families in IPNI
ipni_df = tidy(search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
if(dim(ipni_df)[1] == 0){
print("No Family in IPNI")
##inserting a NULL elemetn
list_fam_IPNI[[i]] = NULL
} else{
##only species with hifen
IPNI_hifen = ipni_df$name[which(str_detect(ipni_df$name,
"-"))]
##filtering
IPNI_hifen_df = ipni_df %>% filter(name %in% IPNI_hifen)
##if else statement for not saving empty dfs
if(dim(IPNI_hifen_df)[1] == 0){
print("No Species with hifen")
##inserting a NULL element
list_fam_IPNI[[i]] = NULL
} else{
##adding the modified name for further comparison with Flora
IPNI_hifen_df$compar_name = str_replace(IPNI_hifen_df$name,
"-", "")
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = IPNI_hifen_df
}
}
}
################# POWO #############################
##loop for finding the species with hifen
for(i in seq_along(fam_names)){
##calling the species within families in POWO
POWO_df = tidy(search_powo(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
if(dim(POWO_df)[1] == 0){
print("No Family in POWO")
##inserting a NULL elemetn
list_fam_POWO[[i]] = NULL
} else{
##only species with hifen
POWO_hifen = POWO_df$name[which(str_detect(POWO_df$name,
"-"))]
##filtering
POWO_hifen_df = POWO_df %>% filter(name %in% POWO_hifen)
##if else statement for not saving empty dfs
if(dim(POWO_hifen_df)[1] == 0){
print("No Species with hifen")
##inserting a NULL element
list_fam_POWO[[i]] = NULL
} else{
##adding the modified name for further comparison with Flora
POWO_hifen_df$compar_name = str_replace(POWO_hifen_df$name,
"-", "")
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_POWO[[i]] = POWO_hifen_df
}
}
}
##transforming in a dataset
POWO_hifen = do.call("rbind.fill",  list_fam_POWO)
#Source
POWO_hifen$source = "POWO"
IPNI_hifen = do.call("rbind.fill", list_fam_IPNI) %>%
select(any_of(c("family", "genus", "species",
"authors", "citationType",
"rank", "hybrid", "reference",
"publication", "publicationYear",
"referenceCollation",
"publicationId", "suppressed",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id",
"fqld", "inPowo", "wfold", "bhlLink",
"publicationYearNote", "remarks",
"referenceRemarks", "compar_name")))%>%
mutate(url = paste0("www.ipni.org/n/", id))
#source
IPNI_hifen$source = "IPNI"
#####matching the names with Flora de Brasil
##POWO
POWO_2nd = df$taxon_name[which(df$taxon_name %in% POWO_hifen$compar_name)]
##filtering
POWO_2nd_df = POWO_hifen %>% filter(compar_name %in% POWO_2nd)
##IPNI
IPNI_2nd = df$taxon_name[which(df$taxon_name %in% IPNI_hifen$compar_name)]
##filtering
IPNI_2nd_df = IPNI_hifen %>% filter(compar_name %in% IPNI_2nd)
##merging
sec_incon_df = rbind.fill(POWO_2nd_df, IPNI_2nd_df)
return(sec_incon_df)
}
y = second_incon_function(df)
View(y)
df = complete_angio_df(angio[1:10000,])
y = second_incon_function(df)
View(y)
first_incon_function <- function(df){
##identifying species with hifen in FFB
##only species with hifen
FFB_hifen = df$taxon_name[which(str_detect(df$taxon_name,
"-"))]
##filtering
FFB_hifen_df = df %>% filter(taxon_name %in% FFB_hifen)
##removing the hifen
FFB_removed_hifen = str_replace(FFB_hifen_df$taxon_name, "-", "")
###creating a list for each species
##For POWO
list_incom_1_powo <- vector("list", length = length(FFB_removed_hifen))
names(list_incom_1_powo) = FFB_hifen
##For IPNI
list_incom_1_ipni <- vector("list", length = length(FFB_removed_hifen))
names(list_incom_1_ipni) = FFB_hifen
######It is better to look species by species than to download the whole family
for(i in seq_along(FFB_removed_hifen)){
list_incom_1_powo[[i]] <- tidy(search_powo(FFB_removed_hifen[i],
filters = c("species",
"accepted")))
list_incom_1_ipni[[i]] <- tidy(search_ipni(FFB_removed_hifen[i],
filters = c("species")))
}
##POWO
##dropping empty list
list_incom_1_powo = list_drop_empty(list_incom_1_powo)
##transforming in a dataset
POWO_incom_1_FFB = do.call("rbind.fill",  list_incom_1_powo)
##column with the names of FFB
POWO_incom_1_FFB$FFB_name = names(list_incom_1_powo)
##Source
POWO_incom_1_FFB$source = "POWO"
##IPNI
##dropping empty list
list_incom_1_ipni = list_drop_empty(list_incom_1_ipni)
##transforming in a dataset
IPNI_incom_1_FFB = do.call("rbind.fill",list_incom_1_ipni)
IPNI_incom_1_FFB = distinct(IPNI_incom_1_FFB, name, .keep_all = TRUE)  %>%
select(any_of(c("family", "genus", "species",
"authors", "citationType",
"rank", "hybrid", "reference",
"publication", "publicationYear",
"referenceCollation",
"publicationId", "suppressed",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id",
"fqld", "inPowo", "wfold", "bhlLink",
"publicationYearNote", "remarks",
"referenceRemarks")))%>%
mutate(url = paste0("www.ipni.org/n/", id))
##column with the names of FFB
IPNI_incom_1_FFB$FFB_name = names(list_incom_1_ipni)
IPNI_incom_1_FFB$name = str_c(IPNI_incom_1_FFB$genus, IPNI_incom_1_FFB$species, sep = " ")
##Source
IPNI_incom_1_FFB$source <- "IPNI"
IPNI_incom_1_FFB$citationType <- "tax_nov"
##dataset representing Incompatibility 1
first_incon_df  = rbind.fill(POWO_incom_1_FFB, IPNI_incom_1_FFB)
return(first_incon_df)
}
third_incon_function <- function(df){
##families
fam_names <- unique(df$Família)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
######creating list for keeping the missing species within each family according to POWO
list_fam_POWO <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
names(list_fam_POWO) <- fam_names
#################IPNI########################################
##loop for finding the species with hifen
for(i in seq_along(fam_names)){
##calling the species within families in IPNI
ipni_df = tidy(search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
if(dim(ipni_df)[1] == 0){
print("No Family in IPNI")
##inserting a NULL elemetn
list_fam_IPNI[[i]] = NULL
} else{
##only species with hifen
IPNI_hifen = ipni_df$name[which(str_detect(ipni_df$name,
"-"))]
##filtering
IPNI_hifen_df = ipni_df %>% filter(name %in% IPNI_hifen)
##if else statement for not saving empty dfs
if(dim(IPNI_hifen_df)[1] == 0){
print("No Species with hifen")
##inserting a NULL element
list_fam_IPNI[[i]] = NULL
} else{
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = IPNI_hifen_df
}
}
}
################# POWO #############################
##loop for finding the species with hifen
for(i in seq_along(fam_names)){
##calling the species within families in POWO
POWO_df = tidy(search_powo(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
if(dim(POWO_df)[1] == 0){
print("No Family in POWO")
##inserting a NULL elemetn
list_fam_POWO[[i]] = NULL
} else{
##only species with hifen
POWO_hifen = POWO_df$name[which(str_detect(POWO_df$name,
"-"))]
##filtering
POWO_hifen_df = POWO_df %>% filter(name %in% POWO_hifen)
##if else statement for not saving empty dfs
if(dim(POWO_hifen_df)[1] == 0){
print("No Species with hifen")
##inserting a NULL element
list_fam_POWO[[i]] = NULL
} else{
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_POWO[[i]] = POWO_hifen_df
}
}
}
##transforming in a dataset
POWO_hifen = do.call("rbind.fill",  list_fam_POWO)
#Source
POWO_hifen$source = "POWO"
IPNI_hifen = do.call("rbind.fill",
list_fam_IPNI) %>%
select(any_of(c("family", "genus", "species",
"authors", "citationType",
"rank", "hybrid", "reference",
"publication", "publicationYear",
"referenceCollation",
"publicationId", "suppressed",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id",
"fqld", "inPowo", "wfold", "bhlLink",
"publicationYearNote", "remarks",
"referenceRemarks")))%>%
mutate(url = paste0("www.ipni.org/n/", id))
#source
IPNI_hifen$source = "IPNI"
##Negative matching of names
POWO_not_FFB = POWO_hifen[-which(POWO_hifen$name %in% df$taxon_name),]
IPNI_not_FFB = IPNI_hifen[-which(IPNI_hifen$name %in% df$taxon_name),]
##Merging
third_incon_df = rbind.fill(POWO_not_FFB, IPNI_not_FFB)
return(third_incon_df)
}
View(df)
g = third_incon_function(df)
View(g)
which(df$taxon_name == g$name[1])
which(df$taxon_name %in% g$name)
third_incon_function <- function(df){
##families
fam_names <- unique(df$Família)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
######creating list for keeping the missing species within each family according to POWO
list_fam_POWO <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
names(list_fam_POWO) <- fam_names
#################IPNI########################################
##loop for finding the species with hifen
for(i in seq_along(fam_names)){
##calling the species within families in IPNI
ipni_df = tidy(search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
if(dim(ipni_df)[1] == 0){
print("No Family in IPNI")
##inserting a NULL elemetn
list_fam_IPNI[[i]] = NULL
} else{
##only species with hifen
IPNI_hifen = ipni_df$name[which(str_detect(ipni_df$name,
"-"))]
##filtering
IPNI_hifen_df = ipni_df %>% filter(name %in% IPNI_hifen)
##if else statement for not saving empty dfs
if(dim(IPNI_hifen_df)[1] == 0){
print("No Species with hifen")
##inserting a NULL element
list_fam_IPNI[[i]] = NULL
} else{
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = IPNI_hifen_df
}
}
}
################# POWO #############################
##loop for finding the species with hifen
for(i in seq_along(fam_names)){
##calling the species within families in POWO
POWO_df = tidy(search_powo(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
if(dim(POWO_df)[1] == 0){
print("No Family in POWO")
##inserting a NULL elemetn
list_fam_POWO[[i]] = NULL
} else{
##only species with hifen
POWO_hifen = POWO_df$name[which(str_detect(POWO_df$name,
"-"))]
##filtering
POWO_hifen_df = POWO_df %>% filter(name %in% POWO_hifen)
##if else statement for not saving empty dfs
if(dim(POWO_hifen_df)[1] == 0){
print("No Species with hifen")
##inserting a NULL element
list_fam_POWO[[i]] = NULL
} else{
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_POWO[[i]] = POWO_hifen_df
}
}
}
##transforming in a dataset
POWO_hifen = do.call("rbind.fill",  list_fam_POWO)
#Source
POWO_hifen$source = "POWO"
IPNI_hifen = do.call("rbind.fill",
list_fam_IPNI) %>%
select(any_of(c("family", "genus", "species",
"authors", "citationType",
"rank", "hybrid", "reference",
"publication", "publicationYear",
"referenceCollation",
"publicationId", "suppressed",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id",
"fqld", "inPowo", "wfold", "bhlLink",
"publicationYearNote", "remarks",
"referenceRemarks")))%>%
mutate(url = paste0("www.ipni.org/n/", id))
#source
IPNI_hifen$source = "IPNI"
##Negative matching of names
POWO_not_FFB = POWO_hifen[-which(POWO_hifen$name %in% df$taxon_name),]
IPNI_not_FFB = IPNI_hifen[-which(IPNI_hifen$name %in% df$taxon_name),]
##Merging
third_incon_df = rbind.fill(POWO_not_FFB, IPNI_not_FFB)
return(third_incon_df)
}
hifen_incompatibility <- function(df){
##completing dataframe information (auxiliary function)
angiosperms_bra = complete_angio_df(df = df)
######## 1st incompatibility hifen in Flora de Brasil but no hifen in Powo/IPNI
first_incon <- first_incon_function(df = angiosperms_bra)
# Second inconsistency ----------------------------------------------------
second_incon <- second_incon_function(df = angiosperms_bra)
# Third inconsistency -----------------------------------------------------
third_incon <- third_incon_function(df = angiosperms_bra)
##listing
list_inconsistencies <- list(first_incon, second_incon, third_incon)
names(list_inconsistencies) <- c("First inconsistency",
"Second inconsistency",
"Third inconsistency")
return(list_inconsistencies)
}
x.1 <- hifen_incompatibility(df = angio)
##libraries
library(vctrs)
x.1 <- hifen_incompatibility(df = angio)
View(x.1)
x.1[["First inconsistency"]]
View(x.1[["First inconsistency"]])
View(x.1[["Second inconsistency"]])
View(x.1[["Third inconsistency"]])
View(x.1)
View(x.1[["First inconsistency"]])
hifen_first = x.1[[1]]
GETWD()
getwd
getwd()
##saving
write_csv(hifen_first, file = "Data/Processed/Angiosperms/hifen_first_inconsistency.csv")
#####Second inconsistency (Hifen in IPNI/POWO but not in Flora)
hifen_second = x.1[[2]]
##saving
write_csv(hifen_second,
file = "Data/Processed/Angiosperms/hifen_2nd_inconsistency.csv")
##Third inconsistency (species with hifen in IPNI/POWO but not present in any form in Flora)
hifen_third = x.1[[3]]
##saving
write_csv(hifen_third,
file = "Data/Processed/Angiosperms/hifen_3rd_inconsistency.csv")
