library(readr)
library(readxl)
library(plyr)
library(writexl)
1350*300
bhl_df = tidy(kewr::search_ipni(list(family = "Acanthaceae",
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
View(bhl_df)
colnames(bhl_df)
bhl_df$remarks
doi.str <- bhl_df$remarks
doi.str
grepl("^doi", doi.str)
grepl("^doi.*? ", doi.str)
str_detect("^doi.*? ", doi.str)
str_detect(doi.str,"^doi.*? " )
if(str_detect(doi.str,"^doi.*? ")= TRUE){
if(str_detect(doi.str,"^doi.*? ")){
x = str_extract(doi.str, "^doi.*? ")
} else{
x = NA
}
x = str_extract(doi.str, "^doi.*? ")
x
str_detect("^doi.*? ", doi.str))
str_detect("^doi.*? ", doi.str)
str_detect("^doi.*?", doi.str)
str_detect(doi.str,"^doi.*? ")
str_extract(doi.str, "^doi.*?")
x = str_extract(doi.str, "^doi.*? ")
x
str_extract(doi.str, "^doi.*? ")
str_extract(doi.str, "^doi.*?")
doi.str
input_string <- "doi:10.13102/neod.131.2 The specific epithet refers to the environment where the species occurs, 'Tabuleiros litorÃ¢neos'"
# Define the regular expression pattern to match the DOI
doi_pattern <- "doi:[[:alnum:]]+\\.[[:alnum:]]+/[[:alnum:]]+\\.[[:alnum:]]+"
# Extract the DOI using str_extract
doi <- str_extract(input_string, doi_pattern)
# Print the extracted DOI
print(doi)
x = str_extract(doi.str, "doi:[^\\s]+")
x
x = str_extract(doi.str, "(?<=doi:)[^\\s]+")
x
if(str_detect(doi.str,"doi:[^\\s]+")){
x = str_extract(doi.str, "(?<=doi:)[^\\s]+")
x = paste0("https//doi.org/", x)
} else{
x = NA
}
str_detect(doi.str,"doi:[^\\s]+"
str_detect(doi.str,"doi:[^\\s]+")
str_detect(doi.str,"doi:[^\\s]+")
x = str_extract(doi.str, "(?<=doi:)[^\\s]+")
x = paste0("https//doi.org/", x)
x
ifelse(str_detect(doi.str,"doi:[^\\s]+"),
paste0("https//doi.org/", str_extract(doi.str, "(?<=doi:)[^\\s]+")),
NA)
ifelse(str_detect(doi.str,"doi:[^\\s]+"),
paste0("https://doi.org/", str_extract(doi.str, "(?<=doi:)[^\\s]+")),
NA)
powo_bhl = tidy(kewr::search_powo(list(family = "Acanthaceae",
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
View(powo_bhl)
colnames(bhl_df)
missing_FFB_function <- function(df){
##completing dataframe information (auxiliary function)
plants_bra = complete_df(df = df)
##dataset with only species with hifen
plants_hifen =
plants_bra[which(stringr::str_detect(plants_bra$taxon_name,
"-")), ]
##removing hifen
plants_hifen$taxon_name =  stringr::str_replace(plants_hifen$taxon_name,
"-", "")
## joining datasets
plants_bra <- rbind(plants_bra, plants_hifen)
##family names
fam_names <- unique(plants_bra$Family)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
######creating list for keeping the missing species within each family according to POWO
list_fam_POWO <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
names(list_fam_POWO) <- fam_names
###################IPNI######################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
}, error = function(e){
message("Absent family in IPNI")
print(e)
})
##IPNI species absent in Flora de Brasil
ipni_abs = ipni_df[-which(ipni_df$name %in% plants_bra$taxon_name), ]
##looking and removing for hifens
ipni_abs$hifen_name = stringr::str_replace(ipni_abs$name,
"-", "")
##IPNI species with hifen absent in FB
if(sum(ipni_abs$hifen_name %in% plants_bra$taxon_name) != 0){
ipni_abs <- ipni_abs[-which(ipni_abs$hifen_name %in% plants_bra$taxon_name), ]
} else {
ipni_abs
}
##removing column
ipni_abs <- ipni_abs %>% dplyr::select(-hifen_name)
##if else statement for not saving empty dfs
if(dim(ipni_abs)[1] == 0){
print("No absent species in Flora de Brasil")
list_fam_IPNI[[i]] = NULL
} else{
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = ipni_abs
}
}
###removing null elements
list_fam_IPNI = list_fam_IPNI[-which(sapply(list_fam_IPNI, is.null))]
#####collapsing the list in a df
df_ipni_families <- do.call("rbind.fill", list_fam_IPNI) %>%
dplyr::select(tidyselect::any_of(c("name", "family", "genus", "species",
"authors", "citationType", "hybrid",
"rank", "reference", "remarks",
"publication", "publicationYear",
"referenceCollation",
"publicationId",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id", "bhlLink",
"publicationYearNote", "remarks")))%>%
dplyr::mutate(url = paste0("www.ipni.org/n/", id))
##working with the columns
df_ipni_families$citationType <- "tax_nov"
df_ipni_families$source <- "IPNI"
##obtaining the doi
df_ipni_families$doi <- ifelse(str_detect(df_ipni_families$remarks,
"doi:[^\\s]+"),
paste0("https://doi.org/",
str_extract(df_ipni_families$remarks,
"(?<=doi:)[^\\s]+")),
NA)
rownames(df_ipni_families) <- NULL
##eliminating duplicated species
df_ipni_families <- df_ipni_families[-which(duplicated(df_ipni_families$name)),]
###########################POWO###############################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in POWO
tryCatch({
##calling the species within families in POWO
powo_df = tidy(kewr::search_powo(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
powo_df
}, error = function(e){
message("Absent family in POWO")
print(e)
})
##POWO species absent in Flora de Brasil
powo_abs = powo_df[-which(powo_df$name %in% plants_bra$taxon_name), ]
##looking and removing for hifens
powo_abs$hifen_name = stringr::str_replace(powo_abs$name,
"-", "")
##Powo species with hifen absent in FB
if(sum(powo_abs$hifen_name %in% plants_bra$taxon_name) != 0){
powo_abs <- powo_abs[-which(powo_abs$hifen_name %in% plants_bra$taxon_name), ]
} else {
powo_abs
}
##removing column
powo_abs <- powo_abs %>% dplyr::select(-hifen_name)
##if else statement for not saving empty dfs
if(dim(powo_abs)[1] == 0){
print("No absent species in Flora de Brasil")
list_fam_POWO[[i]] = NULL
} else{
powo_abs[,c('genus', 'species')] = stringr::str_split_fixed(powo_abs$name, ' ', 2)
powo_abs = dplyr::rename(powo_abs, "authors" = "author")
powo_abs = powo_abs %>% dplyr::relocate(name, family, genus, species, authors)
##inserting a df inside each list with the missing species in the
list_fam_POWO[[i]] = powo_abs
}
}
###removing null elements
list_fam_POWO = list_fam_POWO[-which(sapply(list_fam_POWO, is.null))]
##collapsing the list in a df
df_powo_families <- do.call("rbind", list_fam_POWO)
rownames(df_powo_families) <- NULL
##Source
df_powo_families$source <- "POWO"
##id
df_powo_families$id <- gsub("[^0-9-]", "", df_powo_families$fqId)
##url
df_powo_families$url <- paste0("https://powo.science.kew.org/taxon/",
df_powo_families$id)
##removing species that appear both in IPNI and POWO
df_powo_families <- df_powo_families[!df_powo_families$name %in% df_ipni_families$name,]
##generating reference and publicationYear for merging
df_powo_families$reference <- NA
df_powo_families$publicationYear <- NA
df_powo_families$hybrid <- NA
##loop for generating the reference and publicationYear from lookup_powo
for(i in 1:nrow(df_powo_families)) {
##temporal dataset
tem_df <- tidy(lookup_powo(df_powo_families$id[i]))
#if else statements due some powo df dont have this info
if(is.null(tem_df$reference)){
df_powo_families$reference[i] = NA
}else {
df_powo_families$reference[i] <- tem_df$reference
}
if(is.null(tem_df$namePublishedInYear)){
df_powo_families$publicationYear[i] = NA
}else {
df_powo_families$publicationYear[i] <- tem_df$namePublishedInYear
}
if(is.null(tem_df$hybrid)){
df_powo_families$hybrid[i] = NA
}else {
df_powo_families$hybrid[i] <- tem_df$hybrid
}
}
df_powo_families <- df_powo_families %>%
select(any_of(c("name", "family", "genus", "species",
"authors", "rank", "reference", "hybrid",
"publicationYear", "id", "url", "source")))
##merging dataframes
df_missing_flora <- plyr::rbind.fill(df_ipni_families, df_powo_families)
##removing hybrid species
df_missing_flora <- df_missing_flora %>% dplyr::filter(hybrid == "FALSE")
##removing hybrid column
df_missing_flora <- df_missing_flora %>% dplyr::select(-hybrid)
return(df_missing_flora)
}
bhl_df$doi <- ifelse(str_detect(doi.str,"doi:[^\\s]+"),
paste0("https://doi.org/", str_extract(doi.str, "(?<=doi:)[^\\s]+")),
NA)
View(bhl_df)
bhal_df$doi
bhl_df$doi
colnames(bhl_df)
bhl_df %>% select(doi)
missing_FFB_function <- function(df){
##completing dataframe information (auxiliary function)
plants_bra = complete_df(df = df)
##dataset with only species with hifen
plants_hifen =
plants_bra[which(stringr::str_detect(plants_bra$taxon_name,
"-")), ]
##removing hifen
plants_hifen$taxon_name =  stringr::str_replace(plants_hifen$taxon_name,
"-", "")
## joining datasets
plants_bra <- rbind(plants_bra, plants_hifen)
##family names
fam_names <- unique(plants_bra$Family)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
######creating list for keeping the missing species within each family according to POWO
list_fam_POWO <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
names(list_fam_POWO) <- fam_names
###################IPNI######################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
}, error = function(e){
message("Absent family in IPNI")
print(e)
})
##IPNI species absent in Flora de Brasil
ipni_abs = ipni_df[-which(ipni_df$name %in% plants_bra$taxon_name), ]
##looking and removing for hifens
ipni_abs$hifen_name = stringr::str_replace(ipni_abs$name,
"-", "")
##IPNI species with hifen absent in FB
if(sum(ipni_abs$hifen_name %in% plants_bra$taxon_name) != 0){
ipni_abs <- ipni_abs[-which(ipni_abs$hifen_name %in% plants_bra$taxon_name), ]
} else {
ipni_abs
}
##removing column
ipni_abs <- ipni_abs %>% dplyr::select(-hifen_name)
##if else statement for not saving empty dfs
if(dim(ipni_abs)[1] == 0){
print("No absent species in Flora de Brasil")
list_fam_IPNI[[i]] = NULL
} else{
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = ipni_abs
}
}
###removing null elements
list_fam_IPNI = list_fam_IPNI[-which(sapply(list_fam_IPNI, is.null))]
#####collapsing the list in a df
df_ipni_families <- do.call("rbind.fill", list_fam_IPNI) %>%
dplyr::select(tidyselect::any_of(c("name", "family", "genus", "species",
"authors", "citationType", "hybrid",
"rank", "reference",
"publication", "publicationYear",
"referenceCollation",
"publicationId",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id", "bhlLink",
"publicationYearNote", "remarks")))%>%
dplyr::mutate(url = paste0("www.ipni.org/n/", id))
##working with the columns
df_ipni_families$citationType <- "tax_nov"
df_ipni_families$source <- "IPNI"
##obtaining the doi
df_ipni_families$doi <- ifelse(str_detect(df_ipni_families$remarks,
"doi:[^\\s]+"),
paste0("https://doi.org/",
str_extract(df_ipni_families$remarks,
"(?<=doi:)[^\\s]+")), NA)
rownames(df_ipni_families) <- NULL
##eliminating duplicated species
df_ipni_families <- df_ipni_families[-which(duplicated(df_ipni_families$name)),]
###########################POWO###############################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in POWO
tryCatch({
##calling the species within families in POWO
powo_df = tidy(kewr::search_powo(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
powo_df
}, error = function(e){
message("Absent family in POWO")
print(e)
})
##POWO species absent in Flora de Brasil
powo_abs = powo_df[-which(powo_df$name %in% plants_bra$taxon_name), ]
##looking and removing for hifens
powo_abs$hifen_name = stringr::str_replace(powo_abs$name,
"-", "")
##Powo species with hifen absent in FB
if(sum(powo_abs$hifen_name %in% plants_bra$taxon_name) != 0){
powo_abs <- powo_abs[-which(powo_abs$hifen_name %in% plants_bra$taxon_name), ]
} else {
powo_abs
}
##removing column
powo_abs <- powo_abs %>% dplyr::select(-hifen_name)
##if else statement for not saving empty dfs
if(dim(powo_abs)[1] == 0){
print("No absent species in Flora de Brasil")
list_fam_POWO[[i]] = NULL
} else{
powo_abs[,c('genus', 'species')] = stringr::str_split_fixed(powo_abs$name, ' ', 2)
powo_abs = dplyr::rename(powo_abs, "authors" = "author")
powo_abs = powo_abs %>% dplyr::relocate(name, family, genus, species, authors)
##inserting a df inside each list with the missing species in the
list_fam_POWO[[i]] = powo_abs
}
}
###removing null elements
list_fam_POWO = list_fam_POWO[-which(sapply(list_fam_POWO, is.null))]
##collapsing the list in a df
df_powo_families <- do.call("rbind", list_fam_POWO)
rownames(df_powo_families) <- NULL
##Source
df_powo_families$source <- "POWO"
##id
df_powo_families$id <- gsub("[^0-9-]", "", df_powo_families$fqId)
##url
df_powo_families$url <- paste0("https://powo.science.kew.org/taxon/",
df_powo_families$id)
##removing species that appear both in IPNI and POWO
df_powo_families <- df_powo_families[!df_powo_families$name %in% df_ipni_families$name,]
##generating reference and publicationYear for merging
df_powo_families$reference <- NA
df_powo_families$publicationYear <- NA
df_powo_families$hybrid <- NA
##loop for generating the reference and publicationYear from lookup_powo
for(i in 1:nrow(df_powo_families)) {
##temporal dataset
tem_df <- tidy(lookup_powo(df_powo_families$id[i]))
#if else statements due some powo df dont have this info
if(is.null(tem_df$reference)){
df_powo_families$reference[i] = NA
}else {
df_powo_families$reference[i] <- tem_df$reference
}
if(is.null(tem_df$namePublishedInYear)){
df_powo_families$publicationYear[i] = NA
}else {
df_powo_families$publicationYear[i] <- tem_df$namePublishedInYear
}
if(is.null(tem_df$hybrid)){
df_powo_families$hybrid[i] = NA
}else {
df_powo_families$hybrid[i] <- tem_df$hybrid
}
}
df_powo_families <- df_powo_families %>%
select(any_of(c("name", "family", "genus", "species",
"authors", "rank", "reference", "hybrid",
"publicationYear", "id", "url", "source")))
##merging dataframes
df_missing_flora <- plyr::rbind.fill(df_ipni_families, df_powo_families)
##removing hybrid species
df_missing_flora <- df_missing_flora %>% dplyr::filter(hybrid == "FALSE")
##removing hybrid column
df_missing_flora <- df_missing_flora %>% dplyr::select(-hybrid)
return(df_missing_flora)
}
x1
##running function of missing species in Flora de Brasil
x1 <- missing_FFB_function(df = angio)
View(x1)
##replacing Leguminosae by Fabaceae
x1 <- x1 %>% mutate(family = case_when(family == "Leguminosae" ~ "Fabaceae",
.default = as.character(family)))
##family present
family_x <- sort(unique(x1$family))
##list for each family
list_abs <- vector("list", length = length(family_x))
##recovering ID
angio_id <- angio %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_x)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_x)){
list_abs[[i]] <- x1 %>% filter(family == family_x[i])
write_csv(list_abs[[i]],
file =paste0("Data/Processed/Angiosperms/final_family_2/",
family_x[i], "_FB",
angio_id$ID[i], ".csv"))
}
gimnosperms <- read_excel("Data/Raw/datasheet_gymnosperms_en.xlsx")
View(gimnosperms)
x_angio <- missing_FFB_function(df = gimnosperms)
View(x_angio)
gymnosperms <- read_excel("Data/Raw/datasheet_gymnosperms_en.xlsx")
x_gymno <- missing_FFB_function(df = gymnosperms)
View(x_gymno)
##family present
family_gymno <- sort(unique(x_gymno$family))
##list for each family
list_gymno <- vector("list", length = length(family_gymno))
##recovering ID
gymno_id <- gymnosperms %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_gymno)
View(gymno_id)
##list for each family
list_gymno <- vector("list", length = length(family_gymno))
##recovering ID
gymno_id <- gymnosperms %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_gymno)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_gymno)){
list_gymno[[i]] <- x_gymno %>% filter(family == family_gymno[i])
write_csv(list_gymno[[i]],
file =paste0("Data/Processed/Gymnoperms/family/",
family_gymno[i], "_FB",
gymno_id$ID[i], ".csv"))
}
family_gymno
x_gymno
seq_along(family_gymno)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_gymno)){
list_gymno[[i]] <- x_gymno %>% filter(family == family_gymno[i])
write_csv(list_gymno[[i]],
file =paste0("Data/Processed/Gymnosperms/family/",
family_gymno[i], "_FB",
gymno_id$ID[i], ".csv"))
}
# Ferns -------------------------------------------------------------------
ferns <- read_excel("Data/Raw/datasheet_ferns_en.xlsx")
View(ferns)
x_ferns <- missing_FFB_function(df = ferns)
View(x_ferns)
##family present
family_ferns <- sort(unique(x_ferns$family))
##list for each family
list_ferns <- vector("list", length = length(family_ferns))
##recovering ID
ferns_id <- ferns %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_ferns)
View(ferns_id)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_ferns)){
list_ferns[[i]] <- x_ferns %>% filter(family == family_ferns[i])
write_csv(list_ferns[[i]],
file =paste0("Data/Processed/Ferns/family/",
family_ferns[i], "_FB",
ferns_id$ID[i], ".csv"))
}
