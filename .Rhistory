plants_bra[which(stringr::str_detect(plants_bra$taxon_name,
"-")), ]
##removing hifen
plants_hifen$taxon_name =  stringr::str_replace(plants_hifen$taxon_name,
"-", "")
## joining datasets
plants_bra <- rbind(plants_bra, plants_hifen)
##family names
fam_names <- unique(plants_bra$Family)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
######creating list for keeping the missing species within each family according to POWO
list_fam_POWO <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
names(list_fam_POWO) <- fam_names
###################IPNI######################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
ipni_df
}, error = function(e){
message("Absent family in IPNI")
print(e)
})
##IPNI species absent in Flora de Brasil
ipni_abs = ipni_df[-which(ipni_df$name %in% plants_bra$taxon_name), ]
##if else statement for not saving empty dfs
if(dim(ipni_abs)[1] == 0){
print("No absent species in Flora de Brasil")
} else{
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = ipni_abs
}
}
###removing null elements
list_fam_IPNI = list_fam_IPNI[-which(sapply(list_fam_IPNI, is.null))]
#####collapsing the list in a df
df_ipni_families <- do.call("rbind.fill", list_fam_IPNI) %>%
dplyr::select(tidyselect::any_of(c("name", "family", "genus", "species",
"authors", "citationType",
"rank", "hybrid", "reference",
"publication", "publicationYear",
"referenceCollation",
"publicationId", "suppressed",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id",
"fqld", "inPowo", "wfold", "bhlLink",
"publicationYearNote", "remarks",
"referenceRemarks")))%>%
dplyr::mutate(url = paste0("www.ipni.org/n/", id))
##working with the columns
df_ipni_families$citationType <- "tax_nov"
df_ipni_families$source <- "IPNI"
rownames(df_ipni_families) <- NULL
##eliminating duplicated species
df_ipni_families <- df_ipni_families[-which(duplicated(df_ipni_families$name)),]
###########################POWO###############################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in POWO
tryCatch({
##calling the species within families in POWO
powo_df = tidy(kewr::search_powo(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
powo_df
}, error = function(e){
message("Absent family in POWO")
print(e)
})
##POWO species absent in Flora de Brasil
powo_abs = powo_df[-which(powo_df$name %in% plants_bra$taxon_name), ]
##if else statement for not saving empty dfs
if(dim(powo_abs)[1] == 0){
print("No absent species in Flora de Brasil")
} else{
powo_abs[,c('genus', 'species')] = stringr::str_split_fixed(powo_abs$name, ' ', 2)
powo_abs = dplyr::rename(powo_abs, "authors" = "author")
powo_abs = powo_abs %>% dplyr::relocate(name, family, genus, species, authors)
##inserting a df inside each list with the missing species in the
list_fam_POWO[[i]] = powo_abs
}
}
###removing null elements
list_fam_POWO = list_fam_POWO[-which(sapply(list_fam_POWO, is.null))]
##collapsing the list in a df
df_powo_families <- do.call("rbind", list_fam_POWO)
rownames(df_powo_families) <- NULL
##Source
df_powo_families$source <- "POWO"
##merging dataframes, not repeating species from both repositories
df_missing_flora <- plyr::rbind.fill(df_ipni_families,
df_powo_families[!df_powo_families$name %in% df_ipni_families$name,])
return(df_missing_flora)
}
##calling dataset
angio <- read_excel("Data/Raw/datasheet_angiosperms_en.xlsx")
##running function of missing species in Flora de Brasil
x1 <- missing_FFB_function(df = angio)
View(x1)
x1 %>% filter(genus == "Mendoncia")
x1 %>% filter(genus == "Acanthura")
x_1 <- complete_df(df = angio)
View(x_1)
which(angio$Species %in% x1$species)
angio$Species
View(x1)
which(x_1$taxon_name %in% x1$name)
which( x1$name %in% x_1$taxon_name )
##replacing Leguminosae by Fabaceae
x1 <- x1 %>% mutate(family = case_when(family == "Leguminosae" ~ "Fabaceae",
.default = as.character(family)))
##family present
family_x <- sort(unique(x1$family))
##list for each family
list_abs <- vector("list", length = length(family_x))
##recovering ID
angio_id <- angio %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_x)
angio_id
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_x)){
list_abs[[i]] <- x1 %>% filter(family == family_x[i])
write_csv(list_abs[[i]],
file =paste0("Data/Processed/Angiosperms/final_family_2/",
family_x[i], "_FB",
angio_absent$ID[i], ".csv"))
}
library(readr)
Acanthaceae_FB33 <- read_csv("Data/Processed/Angiosperms/final_family/Acanthaceae_FB33.csv")
View(Acanthaceae_FB33)
View(angio_absent)
View(x1)
x1$name[2]
View(list_abs)
list_abs[[5]]
View(list_abs[[6]])
angio_id
unique(x1$family)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_x)){
list_abs[[i]] <- x1 %>% filter(family == family_x[i])
write_csv(list_abs[[i]],
file =paste0("Data/Processed/Angiosperms/final_family_2/",
family_x[i], "_FB",
angio_id$ID[i], ".csv"))
}
View(angio_id)
?list_drop_empty
?distinct
?any_of
complete_df <- function(df){
plants_bra <- df %>% fill(Family, Genus) %>%
drop_na(Species) %>%
unite("taxon_name",
Genus:Species,
sep = " ", remove = FALSE)
return(plants_bra)
}
library(kewr)
library(tidyverse)
library(readr)
library(readxl)
library(plyr)
library(writexl)
View(angio)
##calling dataset
angio_pt <- read_excel("Data/Raw/datasheet_angiosperms.xlsx")
View(angio_pt)
colnames(angio)
colnames(angio_pt)
colnames(angio_pt)[11]
colnames(angio_pt)[11] == "Espécie"
x <- colnames(angio)
x
as.vector(x)
if(colnames(angio_pt)[11] == "Espécie"){
colnames(angio_pt) <- x
return(angio_pt)
} else{
return(angio_pt)
}
if(colnames(angio_pt)[11] == "Espécie"){
colnames(angio_pt) <- x
} else{
}
View(angio_pt)
##calling dataset
angio_pt <- read_excel("Data/Raw/datasheet_angiosperms.xlsx")
colnames(angio_pt)
if(colnames(angio_pt)[11] == "Espécie"){
colnames(angio_pt) <- c("ID", "Rank", "Group",   "Class", "Division",
"Order", "Family", "Subfamily", "Tribe", "Genus",
"Species", "Subspecies", "Variety", "Form", "Author",
"Registry", "Status",    "Qualifier", "Original work",
"Origin",
"Endemic",                   "Occurs in Brazil",
"Vouchers"  ,                "Reference"  ,
"Life Form"    ,             "Substrate"  ,
"Plant hosts",               "Animals hosts",
"Region Distribution",       "State",
"Hydrographic Distribution", "Environment",
"Phytogeographic Domains",   "Vegetation Types",
"has as a synonym",          "Is a synonym",
"Vernacular name" ,          "Bibliographic",
"Authorship",                "Last Update",
"User's Last Updated" ,      "How To Cite")
} else{
}
View(angio_pt)
if(colnames(angio)[11] == "Espécie"){
colnames(angio) <- c("ID", "Rank", "Group",   "Class", "Division",
"Order", "Family", "Subfamily", "Tribe", "Genus",
"Species", "Subspecies", "Variety", "Form", "Author",
"Registry", "Status",    "Qualifier", "Original work",
"Origin",
"Endemic",                   "Occurs in Brazil",
"Vouchers"  ,                "Reference"  ,
"Life Form"    ,             "Substrate"  ,
"Plant hosts",               "Animals hosts",
"Region Distribution",       "State",
"Hydrographic Distribution", "Environment",
"Phytogeographic Domains",   "Vegetation Types",
"has as a synonym",          "Is a synonym",
"Vernacular name" ,          "Bibliographic",
"Authorship",                "Last Update",
"User's Last Updated" ,      "How To Cite")
} else{
}
View(angio)
complete_df <- function(df){
##checking and changing if column names are in portuguese
if(colnames(df)[11] == "Espécie"){
colnames(df) <- c("ID", "Rank", "Group",   "Class", "Division",
"Order", "Family", "Subfamily", "Tribe", "Genus",
"Species", "Subspecies", "Variety", "Form", "Author",
"Registry", "Status",    "Qualifier", "Original work",
"Origin",
"Endemic",                   "Occurs in Brazil",
"Vouchers"  ,                "Reference"  ,
"Life Form"    ,             "Substrate"  ,
"Plant hosts",               "Animals hosts",
"Region Distribution",       "State",
"Hydrographic Distribution", "Environment",
"Phytogeographic Domains",   "Vegetation Types",
"has as a synonym",          "Is a synonym",
"Vernacular name" ,          "Bibliographic",
"Authorship",                "Last Update",
"User's Last Updated" ,      "How To Cite")
} else{
}
##manipulating dataframe
plants_bra <- df %>% fill(Family, Genus) %>%
drop_na(Species) %>%
unite("taxon_name",
Genus:Species,
sep = " ", remove = FALSE)
return(plants_bra)
}
colnames(angio_pt)
##calling dataset
angio_pt <- read_excel("Data/Raw/datasheet_angiosperms.xlsx")
colnames(angio_pt)
x <- complete_df(df = angio_pt)
View(x)
missing_FFB_function <- function(df){
##completing dataframe information (auxiliary function)
plants_bra = complete_df(df = df)
##dataset with only species with hifen
plants_hifen =
plants_bra[which(stringr::str_detect(plants_bra$taxon_name,
"-")), ]
##removing hifen
plants_hifen$taxon_name =  stringr::str_replace(plants_hifen$taxon_name,
"-", "")
## joining datasets
plants_bra <- rbind(plants_bra, plants_hifen)
##family names
fam_names <- unique(plants_bra$Family)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
######creating list for keeping the missing species within each family according to POWO
list_fam_POWO <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
names(list_fam_POWO) <- fam_names
###################IPNI######################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
}, error = function(e){
message("Absent family in IPNI")
print(e)
})
##IPNI species absent in Flora de Brasil
ipni_abs = ipni_df[-which(ipni_df$name %in% plants_bra$taxon_name), ]
##looking and removing for hifens
ipni_abs$hifen_name = stringr::str_replace(ipni_abs$name,
"-", "")
##IPNI species with hifen absent in FB
if(sum(ipni_abs$hifen_name %in% plants_bra$taxon_name) != 0){
ipni_abs <- ipni_abs[-which(ipni_abs$hifen_name %in% plants_bra$taxon_name), ]
} else {
ipni_abs
}
##removing column
ipni_abs <- ipni_abs %>% dplyr::select(-hifen_name)
##if else statement for not saving empty dfs
if(dim(ipni_abs)[1] == 0){
print("No absent species in Flora de Brasil")
list_fam_IPNI[[i]] = NULL
} else{
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = ipni_abs
}
}
###removing null elements
list_fam_IPNI = list_fam_IPNI[-which(sapply(list_fam_IPNI, is.null))]
#####collapsing the list in a df
df_ipni_families <- do.call("rbind.fill", list_fam_IPNI) %>%
dplyr::select(tidyselect::any_of(c("name", "family", "genus", "species",
"authors", "citationType", "hybrid",
"rank", "reference",
"publication", "publicationYear",
"referenceCollation",
"publicationId",
"typeLocations", "collectorTeam",
"collectionNumber", "collectionDate1",
"distribution", "locality", "id",
"publicationYearNote", "remarks")))%>%
dplyr::mutate(url = paste0("www.ipni.org/n/", id))
##working with the columns
df_ipni_families$citationType <- "tax_nov"
df_ipni_families$source <- "IPNI"
rownames(df_ipni_families) <- NULL
##eliminating duplicated species
df_ipni_families <- df_ipni_families[-which(duplicated(df_ipni_families$name)),]
###########################POWO###############################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in POWO
tryCatch({
##calling the species within families in POWO
powo_df = tidy(kewr::search_powo(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species", "accepted")))
powo_df
}, error = function(e){
message("Absent family in POWO")
print(e)
})
##POWO species absent in Flora de Brasil
powo_abs = powo_df[-which(powo_df$name %in% plants_bra$taxon_name), ]
##looking and removing for hifens
powo_abs$hifen_name = stringr::str_replace(powo_abs$name,
"-", "")
##Powo species with hifen absent in FB
if(sum(powo_abs$hifen_name %in% plants_bra$taxon_name) != 0){
powo_abs <- powo_abs[-which(powo_abs$hifen_name %in% plants_bra$taxon_name), ]
} else {
powo_abs
}
##removing column
powo_abs <- powo_abs %>% dplyr::select(-hifen_name)
##if else statement for not saving empty dfs
if(dim(powo_abs)[1] == 0){
print("No absent species in Flora de Brasil")
list_fam_POWO[[i]] = NULL
} else{
powo_abs[,c('genus', 'species')] = stringr::str_split_fixed(powo_abs$name, ' ', 2)
powo_abs = dplyr::rename(powo_abs, "authors" = "author")
powo_abs = powo_abs %>% dplyr::relocate(name, family, genus, species, authors)
##inserting a df inside each list with the missing species in the
list_fam_POWO[[i]] = powo_abs
}
}
###removing null elements
list_fam_POWO = list_fam_POWO[-which(sapply(list_fam_POWO, is.null))]
##collapsing the list in a df
df_powo_families <- do.call("rbind", list_fam_POWO)
rownames(df_powo_families) <- NULL
##Source
df_powo_families$source <- "POWO"
##id
df_powo_families$id <- gsub("[^0-9-]", "", df_powo_families$fqId)
##url
df_powo_families$url <- paste0("https://powo.science.kew.org/taxon/",
df_powo_families$id)
##removing species that appear both in IPNI and POWO
df_powo_families <- df_powo_families[!df_powo_families$name %in% df_ipni_families$name,]
##generating reference and publicationYear for merging
df_powo_families$reference <- NA
df_powo_families$publicationYear <- NA
df_powo_families$hybrid <- NA
##loop for generating the reference and publicationYear from lookup_powo
for(i in 1:nrow(df_powo_families)) {
##temporal dataset
tem_df <- tidy(lookup_powo(df_powo_families$id[i]))
#if else statements due some powo df dont have this info
if(is.null(tem_df$reference)){
df_powo_families$reference[i] = NA
}else {
df_powo_families$reference[i] <- tem_df$reference
}
if(is.null(tem_df$namePublishedInYear)){
df_powo_families$publicationYear[i] = NA
}else {
df_powo_families$publicationYear[i] <- tem_df$namePublishedInYear
}
if(is.null(tem_df$hybrid)){
df_powo_families$hybrid[i] = NA
}else {
df_powo_families$hybrid[i] <- tem_df$hybrid
}
}
df_powo_families <- df_powo_families %>%
select(any_of(c("name", "family", "genus", "species",
"authors", "rank", "reference", "hybrid",
"publicationYear", "id", "url", "source")))
##merging dataframes
df_missing_flora <- plyr::rbind.fill(df_ipni_families, df_powo_families)
##removing hybrid species
df_missing_flora <- df_missing_flora %>% dplyr::filter(hybrid == "FALSE")
return(df_missing_flora)
}
library(kewr)
library(tidyverse)
library(readr)
library(readxl)
library(plyr)
library(writexl)
##running function of missing species in Flora de Brasil
x1 <- missing_FFB_function(df = angio)
View(x1)
y <- x1 %>% filter(source == "POWO")
View(y)
x1 %>% filter(genus == "Mendoncia")
y <- str_detect(x1$name, "-")
y <- x1$name[str_detect(x1$name, "-")]
y
##replacing Leguminosae by Fabaceae
x1 <- x1 %>% mutate(family = case_when(family == "Leguminosae" ~ "Fabaceae",
.default = as.character(family)))
##family present
family_x <- sort(unique(x1$family))
##list for each family
list_abs <- vector("list", length = length(family_x))
##recovering ID
angio_id <- angio %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_x)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_x)){
list_abs[[i]] <- x1 %>% filter(family == family_x[i])
write_csv(list_abs[[1]],
file =paste0("Data/Processed/Angiosperms/final_family_2/",
family_x[1], "_FB",
angio_id$ID[1], ".csv"))
}
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_x)){
list_abs[[i]] <- x1 %>% filter(family == family_x[i])
write_csv(list_abs[[i]],
file =paste0("Data/Processed/Angiosperms/final_family_2/",
family_x[1], "_FB",
angio_id$ID[1], ".csv"))
}
seq_along(family_x)
View(x1)
family_x
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_x)){
list_abs[[i]] <- x1 %>% filter(family == family_x[i])
write_csv(list_abs[[i]],
file =paste0("Data/Processed/Angiosperms/final_family_2/",
family_x[i], "_FB",
angio_id$ID[i], ".csv"))
}
library(readr)
Acanthaceae_FB33 <- read_csv("Data/Processed/Angiosperms/final_family_2/Acanthaceae_FB33.csv")
View(Acanthaceae_FB33)
x1 %>% filter(family == "Acanthaceae")
ac <- x1 %>% filter(family == "Acanthaceae")
dim(ac)
x1 <- x1 %>% select(-hybrid)
View(x1)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_x)){
list_abs[[i]] <- x1 %>% filter(family == family_x[i])
write_csv(list_abs[[i]],
file =paste0("Data/Processed/Angiosperms/final_family_2/",
family_x[i], "_FB",
angio_id$ID[i], ".csv"))
}
library(readr)
Acanthaceae_FB33 <- read_csv("Data/Processed/Angiosperms/final_family_2/Acanthaceae_FB33.csv")
View(Acanthaceae_FB33)
